using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Core.Model;

public class MethodDeclaration {
    public MethodDeclarationSyntax MethodDeclarationSyntax { get; }

    public MethodDeclaration(string methodName) {
        MethodDeclarationSyntax = GenerateMethodDeclaration(methodName);
    }

    private MethodDeclarationSyntax GenerateMethodDeclaration(string methodName) {
        return MethodDeclaration(
                PredefinedType(
                    Token(SyntaxKind.VoidKeyword)),
                Identifier(methodName))
            .WithAttributeLists(
                SingletonList<AttributeListSyntax>(
                    GenerateTestAttribute()))
            .WithModifiers(
                TokenList(
                    Token(SyntaxKind.PublicKeyword)))
            .WithBody(Block(
                SingletonList<StatementSyntax>(
                    GenerateFailureAssertion())));
    }

    private AttributeListSyntax GenerateTestAttribute() {
        return AttributeList(
            SingletonSeparatedList<AttributeSyntax>(
                Attribute(
                    IdentifierName("Test"))));
    }

    private ExpressionStatementSyntax GenerateFailureAssertion() {
        return ExpressionStatement(
            InvocationExpression(
                    MemberAccessExpression(
                        SyntaxKind.SimpleMemberAccessExpression,
                        IdentifierName("Assert"),
                        IdentifierName("Fail")))
                .WithArgumentList(
                    ArgumentList(
                        SingletonSeparatedList<ArgumentSyntax>(
                            Argument(
                                LiteralExpression(
                                    SyntaxKind.StringLiteralExpression,
                                    Literal("autogenerated")))))));
    }
}